buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("com.gradle.publish:plugin-publish-plugin:1.2.1")
    }
}

plugins {
    id 'java-gradle-plugin'
}

def versions = new Properties()
file('../versions.properties').withInputStream { versions.load(it) }

group = 'io.skippy'
version = versions.skippy

def publishToGradlePluginPortal = project.hasProperty("publishToGradlePluginPortal")
        && Boolean.valueOf(project.property("publishToGradlePluginPortal"))

if ( ! file('../sandbox').text.toBoolean()) {

    if ( publishToGradlePluginPortal) {

        // Gradle Plugin Portal

        apply plugin: 'com.gradle.plugin-publish'

    } else {

        // SonaType OSSRH

        apply plugin: 'io.skippy.ossrh-publish'

        ossrhPublish {
            title = 'skippy-gradle'
            description = 'Skippy\'s Test Impact Analysis for Gradle'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation "org.ow2.asm:asm:" + versions.asm
    implementation "org.ow2.asm:asm-tree:" + versions.asm

    testImplementation "org.junit.jupiter:junit-jupiter-api:" + versions.junit5
    testImplementation "org.junit.jupiter:junit-jupiter-params:" + versions.junit5
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:" + versions.junit5

    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    testImplementation gradleTestKit()
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
        exceptionFormat 'FULL'
    }
    useJUnitPlatform()
}

gradlePlugin {

    website = 'https://github.com/skippy-io/skippy'
    vcsUrl = 'https://github.com/skippy-io/skippy'

    plugins {
        skippyPlugin {
            id = 'io.skippy'
            displayName = 'skippy-gradle'
            description = 'Skippy\'s Test Impact Analysis for Gradle'
            tags.set(['skippy', 'test-impact-analysis'])
            implementationClass = 'io.skippy.gradle.SkippyPlugin'
        }
    }
    automatedPublishing = publishToGradlePluginPortal
}

processResources {
    def tokens = [
            'jacoco.version': versions.getProperty('jacoco')
    ]

    // Use the filter method with ReplaceTokens for token replacement
    filesMatching('**/*.properties') {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: tokens)
    }
}