/*
 * Copyright 2023-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.skippy.common.repository;

import io.skippy.common.model.SkippyConfiguration;
import io.skippy.common.model.TestWithJacocoExecutionDataAndCoveredClasses;
import io.skippy.common.model.TestImpactAnalysis;

import java.nio.file.Path;
import java.util.List;

/**
 * Repository for storage and retrieval of
 * <ul>
 *     <li>log and configuration files,</li>
 *     <li>{@link TestImpactAnalysis} instances and Jacoco execution data and</li>
 *     <li>temporary files that are used for communication between Skippy's JUnit and build libraries.</li>
 * </ul>
 *
 * The default implementation stores both {@link TestImpactAnalysis} instances and Jacoco execution data in the
 * Skippy folder on the filesystem. In the future, users will be able to register custom implementations that use
 * alternative storage systems like databases or blob storage systems like AWS S3.
 *
 * @author Florian McKee
 */
public interface SkippyRepository {

    static SkippyRepository getInstance(Path projectDir) {
        return new DefaultSkippyRepository(projectDir);
    }

    static SkippyRepository getInstance() {
        return new DefaultSkippyRepository(Path.of("."));
    }

    /**
     * Deletes the Skippy folder.
     */
    void deleteSkippyFolder();

    /**
     * Deletes all log files from the Skippy folder.
     */
    void deleteLogFiles();

    /**
     * Saves the {@link SkippyConfiguration} in the Skippy folder.
     *
     * @param skippyConfiguration the {@link SkippyConfiguration}
     */
    void saveConfiguration(SkippyConfiguration skippyConfiguration);

    /**
     * Allows Skippy's JUnit libraries to temporarily save test execution data in the Skippy folder.
     * The data will be automatically deleted after the build finishes.
     *
     * @param testClassName the name of a test class (e.g., com.example.FooTest)
     * @param jacocoExecutionData Jacoco execution data for the test.
     */
    void saveTemporaryTestExecutionDataForCurrentBuild(String testClassName, byte[] jacocoExecutionData);

    /**
     * Returns the test execution data written by {@link #saveTemporaryTestExecutionDataForCurrentBuild(String, byte[])}
     *
     * @return the test execution data written by {@link #saveTemporaryTestExecutionDataForCurrentBuild(String, byte[])}
     */
    List<TestWithJacocoExecutionDataAndCoveredClasses> getTemporaryTestExecutionDataForCurrentBuild();

    /**
     * Reads the {@link TestImpactAnalysis} instance for the current build.
     *
     * @return the {@link TestImpactAnalysis} instance for the current build
     */
    TestImpactAnalysis readTestImpactAnalysis();

    /**
     * Saves the {@link TestImpactAnalysis} generated by the current build.
     *
     * @param testImpactAnalysis a {@link TestImpactAnalysis}
     */
    void saveTestImpactAnalysis(TestImpactAnalysis testImpactAnalysis);

    /**
     * Saves Jacoco execution data for usage by subsequent builds.
     *
     * @param jacocoExecutionData Jacoco execution data
     * @return a unique identifier for the execution data (also referred to as execution id)
     */
    String saveJacocoExecutionData(byte[] jacocoExecutionData);

}